package com.qa.nasmita.qa_checking_bot.service;

import com.qa.nasmita.qa_checking_bot.config.BotConfig;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Slf4j
@Service
public class TelegramBot extends TelegramLongPollingBot {

    private final BotConfig config;

    private static final String HELP_TEXT = "Этот бот помогает проверить твои базовые знания тестировщика. \n\n" +
            "Нажми на /question чтобы получить случайный вопрос по теории. \n\n" +
            "Нажми на /answer чтобы получить ответ на вопрос.";
    String answer = null;

    public TelegramBot(BotConfig config) {
        this.config = config;
        List<BotCommand> listCommands = new ArrayList<>();
        listCommands.add(new BotCommand("/start", "Начать работу с ботом"));
        listCommands.add(new BotCommand("/help", "Помощь"));
        listCommands.add(new BotCommand("/question", "Случайный вопрос"));
        listCommands.add(new BotCommand("/answer", "Получить ответ на вопрос"));

        try {
            this.execute(new SetMyCommands(listCommands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            log.error("Ошибка создания команды: {}", e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return config.getBotName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {

        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();


            switch (messageText) {
                case "/start":
                    startCommandReceived(chatId, update.getMessage().getChat().getFirstName());
                    break;
                case "/help":
                    sendMessage(chatId, HELP_TEXT);
                    break;
                case "/question":
                    randomQuestion(chatId);
                    break;
                case "/answer":
                    randomAnswer(chatId, answer);
                    break;
                default:
                    sendMessage(chatId, "Извините, эта команда не поддерживается.");
            }
        }


    }

    private void startCommandReceived(long chatId, String name) {
        String answer = "Привет, " + name + ", давай проверим твои знания!";

        sendMessage(chatId, answer);
    }

    private void randomQuestion(long chatId) {
        HashMap<String, String> map = new HashMap<>();
        map.put("Что такое тестирование (ПО)?", "Поиск разницы между ожидаемым и фактическим поведением\n" +
                "Также это способ оценить качество ПО и снизить риски его отказа.");
        map.put("В чем цель тестирования и какая роль тестировщика на проекте?", "\n1. Проверка соотвествия ПО заявленным требованиям 2. Обеспечение уверенности в качестве ПО 3. Поиск очевидных ошибок в ПО, которые должны быть выявлены до того, как их обнаружит пользователь. ");
        map.put("Какие основные этапы процесса тестирования?", "1. Планирование и анализ требований\n" +
                "2. Тестовое планирование\n" +
                "3. Разработка тест-кейсов\n" +
                "4. Подготовка тестовой среды\n" +
                "5. Выполнение тест-кейсов\n" +
                "6. Фиксация найденных дефектов\n" +
                "7. Анализ результатов тестирования\n" +
                "8. Отчетность");
        map.put("Какие ты знаешь характеристики качества ПО?", "\n1. Функциональность - ПО работает исправно и точно\n" +
                "2. Надежность - способность продукта сохранять работоспособность, восстанавливаться после сбоев\n" +
                "3. Удобство использования - удобство работы для пользователя\n" +
                "4. Эффективность - способность ПО обеспечивать требуемый уровень производительности\n" +
                "5. Удобство сопровождения - простота эксплуатации. Не создавать проблем при внесении изменений в продукт\n" +
                "6. Портативность - легкость переноса продукта в другое окружение.");
        map.put("Что такое жизненный цикл разработки ПО?","Это этапы через которые проходит любая программная система.");
        map.put("Какие этапы есть в разработке ПО? ","\"1. Сбор и анализ требований.\n" +
                "2. Документирование требований.\n" +
                "3. Дизайн\n" +
                "4. Разработка ПО\n" +
                "5. Тестирование\n" +
                "6. Внедрение и поддержка продукта\"");
        map.put("Что такое методология разработки?","Совокупность методов, вменяемых на различных стадиях жизненного цикла ПО");
        map.put("Что такое agile?","\"Философия гибкой разработки. \n" +
                "Плюсы:\n" +
                "Заказчик может наблюдать результаты\n" +
                "Минусы:\n" +
                "Сложнос оценить стоимость трудозатрат\"");
        map.put("Что такое подход SCRUM?","\"1. Работа короткими циклами (спринты, обычно две недели). Проект делится на части и реализуется поэтапно\n" +
                "2. Гибкость. После окончания каждого спринта проводится тестирование. \n" +
                "3. Взаимодействие с командой (собрания-стендапы, за этим следит скрам-мастер)\"");
        map.put("Какие встречи бывают SCRUM подходе?","\"Ежедневный Скрам\n" +
                "Планирование Спринта\n" +
                "Ретроспектива Спринта\n" +
                "Актуализация Бэклога Продукта\n" +
                "Обзор Спринта\"");
        map.put("Что такое подход Kanban?","Подход построенный на управление проектом в виде доски с карточками и столбиками-статусами.");
        map.put("В чем различие между SCRUM и Kanban?","В длине итераций. В скрам, между этапами разработки проходит две недели (спринты), а в канбан задачи можно подкидывать хоть каждый день. В канбан больше гибкости");
        map.put("Перечисли этапы гибкой методологии разработки","Планирование - разработка - тестирование - демонстрация - внедрение");
        map.put("Что такое водопад (каскад)?","\"Жесткий способ управления не подразумевает спринтов и возможности вернуться на предыдущую стадию. Подойдет в авиации, в космической сфере и медицине\n" +
                "Плюсы: Заранее определенный стоимость и срок\n" +
                "Минусы: \n" +
                "1.Тестирование подключается только с середины проекта\n" +
                "2. Высокая стоимость внесения изменений в проект\"");
        map.put("Какие стадии разработки есть в водопаде?","\"1. Проектирование\n" +
                "2. Дизайн\n" +
                "3. Кодирование\n" +
                "4. Тестирование\n" +
                "5. Поддержка\"");
        map.put("Что такое требование?","Описание того, какие функции и условия выполняются в приложении для решения задач для пользователей");
        map.put("Какие ты знаешь свойства качественных требований?","\"1 Корректность — точное описание разрабатываемого функционала.\n" +
                " 2 Проверяемость — формулировка требований таким образом, чтобы можно было выставить однозначный вердикт, выполнено все в соответствии с требованиями или нет.\n" +
                " 3 Полнота — в требовании должна содержаться вся необходимая для реализации функциональности информация.\n" +
                " 4 Недвусмысленность — требование должно содержать однозначные формулировки.\n" +
                " 5 Непротиворечивость — требование не должно содержать внутренних противоречий и противоречий другим требованиям и документам.\n" +
                " 6 Приоритетность — у каждого требования должен быть приоритет(количественная оценка степени значимости требования). Этот атрибут позволит грамотно управлять ресурсами на проекте.\n" +
                " 7 Атомарность — требование нельзя разбить на отдельные части без потери деталей.\n" +
                " 8 Модифицируемость — в каждое требование можно внести изменение.\n" +
                " 9 Прослеживаемость — каждое требование должно иметь уникальный идентификатор, по которому на него можно сослаться.\"");
        map.put("С помощью какой техники можно проверить что требование является проверяемым? ","Тест-кейсы и чек-листы");
        map.put("В чем разница между QA и QC?","\"QA- проактивная работа по построению процесса. Обеспечение качества продукта. Основная задача выстроить систему, чтобы при тестировании количество дефектов было минимальным. Вмещает QC и тестирование.\n" +
                "QC- документация плюс негативные сценарии. Контроль качества продукта. предоставление объективной картины того, что происходит с качеством продукта на разных этапах разработки.\"");
        map.put("Когда начинают тестировать требования?","С документации требований. Тестирование на проекте начинается как можно раньше, чтобы исправления стоили меньше средств.");
        map.put("Что самое важное в тестировании?","Прозрачные процессы и хорошая документация");
        map.put("Как понять, что задача протестирована?","\"Пройдены все проверки из чек-листа. \n" +
                "Баланс между паранойей и действительно важными вещами. \n" +
                "И про то, что тестирование на 100% невозможно.\"");
        map.put("Когда можно завершить (закончить) тестирование?","Когда прошёл тестирование по чек-листу");
        map.put("Какие твои любимые инструменты в тестировании?","\"Глаза и здравый смысл : ) \n" +
                "А ещё postman, devtools, и для работа с базой данных metabase\"");
        map.put("В чем разница между авторизацией, аутинтентификацией, идентификаций**, верификацией и валидацией","\"Для начала система запрашивает логин, пользователь его указывает, система распознает его как существующий — это **идентификация.\n" +
                "    \n" +
                "После этого Google просит ввести пароль, пользователь его вводит, и система соглашается, что пользователь, похоже, действительно настоящий, раз пароль совпал, — это аутентификация.\n" +
                "    \n" +
                "После этого система предоставит пользователю право читать письма в его почтовом ящике и все в таком духе — это авторизация.\n" +
                "    \n" +
                "Верификация — что форма логина и пароля вообще есть\n" +
                "Валидация — проверка на технические ограничения типа пароль не менее 6 символов\"");
        map.put("какой основной вид тестирования для общей поддержки качества продукта? как организовывается?","Регресс");
        map.put("чем функциональное тестирование отличается от нефункционального?","\"Функциональное проверяет фичу сквозь весь программный продукт, со всех сторон\n" +
                "нефункциональное оценивает качество продукта в целом (GUI, юзабилити, безопасность, инсталляционное, конфигурационное, на отказ, локализация, производительность - нагрузка, стабильность, стресс, объемное, масштабируемость)\"");
        map.put("Расскажи классификацию видов тестирования","\"По запуску кода на исполнение: \n" +
                "1. Статическое тестирование - без запуска.\n" +
                "2. Динамическое тестирование - с запуском.\n" +
                "\n" +
                "По доступу к коду:\n" +
                "1. Метод белого ящика - доступ к коду есть.\n" +
                "2. Метод черного ящика - доступа к коду нет.\n" +
                "3. Метод серого ящика. К части кода доступ есть, к части - нет.\n" +
                "\n" +
                "По степени автоматизации:\n" +
                "1. Ручное тестирование - тест-кейсы выполняет человек.\n" +
                "2. Автоматизированное тестирование - тест-кейсы частично или полностью выполняют специальный инструмент\n" +
                "\n" +
                "По уровню тестирования:\n" +
                "1. Модульное тестирование - проверяется отдельные небольшие части приложения\n" +
                "2. Интеграционное тестирование - проверяется взаимодействие между несколькими частями приложения\n" +
                "3. Системное тестирование - приложение проверятся как единое целое.\n" +
                "4. Приемочное тестирование - проверяет соответствие системы потребностям, требованиям\n" +
                "\n" +
                "По уровню функционального тестирования:\n" +
                "1. Смоук тестирование - проверка самой важной ключевой функциональности, неработоспособность которой делает бессмысленной саму идею использования приложения.\n" +
                "2. Тестирование критического пути - проверка функциональности, используемой типичными пользователями в типичной повседневной деятельности. Пример: Возможность набора текста\n" +
                "3. Расширенное тестирование - проверка всей (остальной) функциональности заявленной в требованиях. нестандартное использование продукта. Пример: Ввод специальных символов и т.д.\n" +
                "\n" +
                "По принципам работы с приложениями: \n" +
                "1. Позитивное тестирование - тестирование при котором используются только корректные данные.\n" +
                "2. Негативное тестирование - тестирование приложения при котором используются некорректные данные и выполняются некорректные операции (Негативные тесты не предполагают возникновение ошибки, напротив - они предполагают, что верно работающее приложение даже в критической ситуации поведет себя правильным образом. Пример: Отобразит сообщение, \"\"Делить на 0 нельзя\"\")\n" +
                "\n" +
                "В зависимости от цели тестирования:\n" +
                "-Функциональное тестирование - направлен на проверку корректности работы функциональности приложения\n" +
                "-Нефункциональное тестирование - тестирование атрибутов компонента или системы не относящихся к функциональности\"");
        map.put("Назови несколько примеров функционального тестирования и несколько нефункционального.","\"Примеры функционального тестирования:\n" +
                "-модульное тестирование;\n" +
                "-смоук тестирование\n" +
                "-интеграционное тестирование;\n" +
                "-метод белого ящика;\n" +
                "-метод черного ящика;\n" +
                "\n" +
                " \n" +
                "Примеры нефункционального тестирования:\n" +
                "-Тестирование производительности\n" +
                "-Нагрузочное тестирование\n" +
                "-Тестирование отказоустойчивости\n" +
                "-Инсталяционное тестирование (установка, удаление, обновление приложения)\n" +
                "-Юзабилити-тестирование\n" +
                "-Стресс-тестирование\"");
        map.put("Что такое регресс?","\"Проверка что новый функционал не сломал старый. \n" +
                "- Проводится в каждом билде \n" +
                "- Проверка связанных функциональностей\n" +
                "- Проводится несколько раз\n" +
                "- Часто автоматизируют\n" +
                "\n" +
                "Выбор тестов для регрессии\n" +
                "\n" +
                "-Покрывают безопасность, критичные функции\n" +
                "-Области, которые чаще всего меняются в разработке\"");
        map.put("Что такое смоук тестирование?","Выборка самых критичных тестов. Проводится на начальном этапе, например после нового билда.");
        map.put("Что такое интеграционное тестирование? Приведи примеры.","\"Необходимо для того, чтобы тестировать взаимосвязь между чем-либо. В общем случае различают два вида интеграционного тестирования.\n" +
                "-Компонетное интеграционное тестирование. Необходимо для того, чтобы протестировать работу модулей связки друг с другом\n" +
                "-Системное интеграционное тестирование - для тестирования систем друг с другом. Для этого уровня тестирования также характерно несколько целей:\n" +
                "1.Проверка интерфейсов на соответствие требованиям\n" +
                "2. Обнаружени ошибок в интерфейсах\n" +
                "3. Предотвращение пропуска ошибок на более высокие уровни тестирования\"");
        map.put("В чем разница между нагрузочным тестированием и стресс тестированием?","\"Нагрузочное тестирование показывает, как ведет себя ваше приложение при нагрузке. Увеличение нагрузки до пикового значения, при котором система начнет тормозить\n" +
                "Стресс тестирование - заключается в постоянной перегрузке ресурса, до тех пор, пока сервер полностью не \"\"ляжет\"\". Стресс-тестинг показывает скорость отклика вашего ресурса, когда оказываемая нагрузка значительно привышает норму, указанную в требованиях к проекту\"");
        map.put("В чем измеряется нагрузочное тестирование?","\"Единица измерения: RPS\n" +
                "Инструменты: Jmeter\"");
        map.put("Что такое тест-дизайн и какие техники ты знаешь?","\"Тест дизайн - процесс, который помогает ограничить количество тест-кейсов и проверить негативные сценарии. Разбиение на классы эквивалентности, анализ граничных значений, попарное тестирование\n" +
                "\"");
        map.put("Что такое класс эквивалентности?","Множество значений, которые при тестировании дают одинаковый результат. Необходимо провести хотя бы один тест для одного класса");
        map.put("В чем заключается техника тест-дизайна «Граничные значения»","Это проверка значения на минимум/максимум значений на границе классов эквивалентности.");
        map.put("Что такое тест-кейс?","Это четкое описание действий, которые некобходимо выполнить для проверки функционала");
        map.put("Что такое баг?","Отклонение фактического результата от ожидаемого.");
        map.put("Что такое баг-репорт?","Документ, который содержит отчет о любом недостатке, компоненте или системе");
        map.put("Отличие Severity от Priority","\"Siverity - это влияние дефекта на работоспособность (заполняется QA)\n" +
                "Priority - это очередность исправлений (заполняется, в теории, менеджером). Бывает три вида: \n" +
                "1. blocker - требуется исправить в первую очередь\n" +
                "2. normal - требуется исправить если нет blocker\n" +
                "3. minor - исправляется в последнюю очередь\"");
        map.put("Какие основные части багрепорта ты знаешь?","\"1 Заголовок - должен отвечать на вопросы \"\"Что? где? при каких условиях?\"\"\n" +
                "2 Шаги воспроизведения\n" +
                "3 Текущий результат - можно словами или скриншот\n" +
                "4 Ожидаемый результат - можно словами или скриншот\n" +
                "5 Окружение - Билд (версия приложения сайта или бэкенда. Если знаем), Только Ios или только Андроид или на обеих платформах сразу, Браузер (какой? какая версия?)\n" +
                "6 Тестовые устройства - с какого устройства выявляется баг (iphone ios 15)\n" +
                "7 ручка (чаще всего для багрепорта на бэкенд) -curl запроса\n" +
                "8 Аналитика - Если бы я у вас работала, то прикрепила бы ссылку на яндекс.метрику с количеством пользователей, которых заафектила проблема\n" +
                "9 Логи(kibana) - Если бы я у вас работала, то прикрепила бы ссылку на логи из кибаны или Sentry\n" +
                "10 Slack или Telegram - Если бы я у вас работала, то прикрепила бы ссылку обсуждения этого бага в Slack/Telegram\n" +
                "11 Документация - Если бы я у вас работала, то прикрепила бы ссылку на документацию(фигма, сваггер, конфлюенц)\"");
        map.put("Что такое TMS?","Система ведений и хранений тест-кейсов");
        map.put("Какие известные TMS ты знаешь и с какими у тебя есть опыт работы?","\"-TestRail\n" +
                "-Test It\n" +
                "-Qase.io\n" +
                "\n" +
                "Рабоатал(а) с Qase.io\"");
        map.put("Что такое Test Suit?","Тестовый набор, который включает в себя тест-кейсы");
        map.put("Как правильно выбрать в каких браузерах будешь тестировать сайт?","Выберу браузер по движку. Хром (движок Chromium), Firefox (движок Quantum) и Safari (движок webKit)");
        map.put("Как проверить работу сайта со слабым интернетом?","\" Медленную скорость Интернет-соединения можно с помощью Charles для мобилок.\n" +
                "Для веб-сайта - devtools\n" +
                "Для бэкенд - Postman\"");
        map.put("В чем разница между чек-листом и тест-планом?","\"Чек-листы нужны, чтобы записать и структурировать все проверки.\n" +
                "Тест-план нужен, чтобы записать и структурировать все, что нам поможет провести успешное тестирование\"");
        map.put("Какие виды тестовой документации ты знаешь?","\"тест план;\n" +
                "чек-лист;\n" +
                "пользовательская история (User Story);\n" +
                "отчет о дефекте.\"");
        map.put("Как может выглядеть отчет по тестированию?","\"документ, обобщающий результаты работ по тестированию и содержащий информацию, достаточную для соотнесения текущей ситуации с тест-планом и принятия необходимых управленческих решений.\n" +
                "\n" +
                "Обычно он включает в себя таблицы, графики, списки, просто описывающую информацию в виде текста.\"");
        map.put("Назовите семь принципов тестирования","\"1. Тестирование демонстрирует наличие дефектов - Тестирование не может показать, что дефектов нет.\n" +
                "2. Исчерпывающее тестирование невозможно - всегда есть риски и приоритеты. Полное тестирование с использованием всех комбинаций физически невозможна. Главный ресурс, котрого всегда не хватает - время.\n" +
                "3. Раннее тестирование - сохраняет время и деньги.\n" +
                "4. Скопление дефектов - небольшое количество модулей содержит большинство дефектов.\n" +
                "5. Парадокс пестицида - если одни и те же тесты выполняются снова и снова, они перестают находить дефекты\n" +
                "6. Тестирование зависит от контекста - например медицинское по будет тестироваться иначе, нежели интернет- магазин\n" +
                "7. Заблуждение об отсутствии ошибок - тестировщики не могут найти все дефекты, исправления большинства дефектов не гарантирует, что система будет удовлетворять ожиданием пользователей\"");
        map.put("Что такое пирамида тестирования?","\"Пирамида тестирования, также часто говорят уровни тестирования, это группировка тестов по уровню детализации и их назначению. Она также дает представление, какое количество тестов должно быть в каждой из этих групп\n" +
                "\n" +
                "Пирамиду разбивают на 4 уровня (снизу вверх)\n" +
                "\n" +
                "-модульное тестирование (юнит);\n" +
                "-интеграционное тестирование;\n" +
                "-системное тестирования;\n" +
                "-приемочное тестирование\n" +
                "\n" +
                "Но можно встретить варианты, где 3 уровня. \n" +
                "\n" +
                "В этой модели объединяют интеграционный и системный уровни:\n" +
                "модульное тестирование (юнит);\n" +
                "интеграционное тестирование (включает в себя системное);\n" +
                "приемочное тестирование.\n" +
                "\n" +
                "1. Компонетное-модульное тестирование этот вид тестирования выполняется на самой ранней стадии разработки программы - во время написания кода. Обычно его выполняет сам программист, который пишет код. Для этого уровня тестирования характерны несколько целей: \n" +
                "1.1 Проверка компонента на соответствие требованиям\n" +
                "1.2 Обнаружение ошибок в компоненте \n" +
                "1.3 Предотвращение пропуска ошибок на более высокие уровни тестирования\n" +
                "\n" +
                "2. Интеграционное тестирование - необходимо для того, чтобы тестировать взаимосвязь между чем-либо.\n" +
                "\n" +
                "3. Системное тестирование - это тестирование более высокого уровня. Тестирование корректности работы всей системы в целом. Программа в этом случаи должна быть максимально приближена к конечному результату.\n" +
                "\n" +
                "4. Приемочное тестирование - используется для подтверждения готовности продукта и проводится преимущественно в самом конце цикла разработки программы\"");
        //начинаются вопросы по git
        map.put("Что такое гит?","Система управлениями версий");
        map.put("Какой командой в гите сменить ветку?","git checkout \"Имя_ветки_на_которую_переключаемся\"");
        map.put("Какой командой создать коммит?","git commit -am \"название нового коммита\"");
        map.put("Какой командой первый раз скачать себе репозиторий?","git clone ссылка_на_репозиторий");
        map.put("Расскажи про свой опыт с git: что ты уже делал(а), какие команды, зачем и для чего запускал","\"Скачивал(а) репозиторий к себе на компьютер с помощью команды git clone.\n" +
                "создала новую ветку с помощью git checkout -b \"\"имя_новой_ветки\"\"\n" +
                "спуллила изменения с помощью команды git pull\n" +
                "добавила изменения\n" +
                "снова спуллила изменения (а то мало ли, пока я добавляла изменения - разработчик мог внести свои)\n" +
                "добавила изменения в коммит с помощью git add . (точка)\n" +
                "проверила все ли изменения добавились в коммит с помощью git status\n" +
                "далее написала git commit -am \"\"название нового коммита\"\"\n" +
                "и в конце запушила изменения с помощью git push\"");

        //начинаются вопросы по Linux
        map.put("Что такое Линуксовая консоль (терминал, гитбаш)?","Инструмен для управления компьютером и запуском команд без мыши. В том числе используется для работы с гит");
        map.put("Какой командой в линукс сменить папку?","cd");
        map.put("Какой командой посмотреть содержимое текущей папки?","ls");
        map.put("Какой редактор текста в линуксе ты использовал(а)?","vim");
        map.put("Назови команды в линуксовой консоли которые ты знаешь","\"pwd - текущая папка\n" +
                "cd .. - вернуться на уровень выше\n" +
                "mkdir \"\"имя папки\"\" - создать новую папку\n" +
                "mv - переместить файл или папку\n" +
                "cp - копировать файл\"");
        map.put("\"Как активировать режим редактора vim?\n" +
                "Как закончить  режим редактора vim?\"","\"1.Клавиша i - активировать режим редактора (появится внизу надпись INSERT)\n" +
                "2.Клавиша esc - закончить режим редактора (исчезнет внизу надпись INSERT)\"");
        map.put("Как выйти из vim?","\"1.Выйти без сохранений (при вводе этой команды она будет видна внизу терминала) esc + :q! + enter\n" +
                "2.Выйти и сохранить esc + :wq + enter\"");

        //вопросы по SQL
        map.put("SQL: Какие типы баз данных ты знаешь и в чем их отличие?","\"Реляционные БД SQL - есть взаимосвязи между базами данных. Храним данные в разных взаимосвязных таблицах (MySQL, PostgreSQL)\n" +
                "Нереляционные БД noSQL - есть одна база данных.\"");
        map.put("SQL: Что такое slave база данных?","Репликация — одна из техник масштабирования баз данных. Состоит эта техника в том, что данные с одного сервера базы данных постоянно копируются (реплицируются) на один или несколько других (называемые репликами). Для приложения появляется возможность использовать не один сервер для обработки всех запросов, а несколько. Таким образом появляется возможность распределить нагрузку с одного сервера на несколько.");
        map.put("SQL: Какие операторы SQL ты знаешь?","\"SELECT {{какой столбик вывести}}\n" +
                "FROM {{из какой таблички}}\n" +
                "\n" +
                "JOIN {{какую таблицу добавляем}}\n" +
                "ON {{название столбика из одной таблицы}} = {{название столбика из другой}}\n" +
                "\n" +
                "WHERE {{какой столбик известен из текста вопроса}} = {{его значение}}\n" +
                "\n" +
                "ORDER BY {{столбюец, по которому сортировать}} по умолчанию по возрастанию. По убыванию + DESC\n" +
                "\n" +
                "LIMIT {{число, ограничение выборки}}\n" +
                "\n" +
                "SELECT COUNT (*) [возвращает количество строк]\n" +
                "\n" +
                "*Число и булево без ковычек\n" +
                "**LIMIT - правило хорошего тона, чтобы по неосторожности не повесить БД\"");
        map.put("SQL: Какой оператор отвечает за сортировку?","ORDER BY");
        map.put("SQL: Какие агрегатные функции ты знаешь?","\"min - определяет наименьшее из всех выбранных значений\n" +
                "max - определяет наибольшее из всех выбранных значений\n" +
                "count - производит посдчет записей, который соотетсвует условию\n" +
                "avg - среднее арифметическое всех значений\n" +
                "sum - вычисляет сумму всех значений колонки\"");
        map.put("SQL: С каким видом базы данных у тебя есть опыт работы и как назывался клиент через которые выполнял запросы?","Реляционные, Metabase");
        map.put("SQL: Какие виды Join ты знаешь? В чем между ними разница?","\"INNER JOIN - Выведет значения, которые найдут пару в другой таблице\n" +
                "LEFT JOIN - Будет в приоритете ставить левую таблицу и выводить значение ее даже если соответствие не найдется\n" +
                "RIGHT JOIN - аналогично, но с правой\n" +
                "FULL JOIN - выведет все значения\"");
        map.put("SQL: Назови дополнительные операторы SQL","\"DISTINCT - уникальные значения. \n" +
                "Пример: SELECT DISTINCT Singer FROM Artists\n" +
                "\n" +
                "LIKE - Поиск по части\n" +
                "Пример: SELECT * FROM Universities WHERE Site LIKE '%.ru'\n" +
                "\n" +
                "GROUP BY - Объединение по столбцам. Обычно исп. с агрегатной функцией \n" +
                "Пример: SELECT Singer, SUM(Sale) FROM Artists GROUP BY Singer\"");

        //Вопросы по CI/CD
        map.put("Как расшифровывается и что такое CI/CD?","Continuous Integration, Continuous Delivery — Это философия непрерывной интеграции и доставки");
        map.put("В каком инструменте работают дизайнеры?","Figma");
        map.put("Что такое HTML и что такое CSS?","\"HTML - Это код, который используется для структурирования и отображения веб страницы и ее контента\n" +
                "CSS - Каскадная таблица стилей отвечает за свойство и расположение элементов на странице сайта\"");
        map.put("Назови пару html тегов наизусть","\"<link> - ссылка на стили css\n" +
                "<Html> - стандартный тег\n" +
                "<body> - тег для обозначения содержания сайта\n" +
                "<p> - новый абзац\n" +
                "<a> - ссылка\n" +
                "<h2> - заголовок\n" +
                "<title> - тег для названия вкладки браузера\"");
        map.put("Что такое селектор?","Механизм для поиска HTML элемента");
        map.put("В каких тегах прописывают информацию для SEO оптимизации сайта?","\"title - тег для названия вкладки браузера\n" +
                "description - Большинство поисковых серверов отображают содержимое поля description при выводе результатов поиска\"");
        map.put("Для чего нужен чарльз?","Инструмент мониторинга Http и Https трафика. Он выступает в роли прокси сервера (промежуточного звена) между тестируемым приложением и сервером на бэкенде, позволяя не только видеть, но также перехватывать и редактировать запросы. Главное преимущество Charles-proxy и снифферов в целом - возможность просмотра трафика, в том числе с мобильных устройств.");
        map.put("Какие основные команды чарльза ты знаешь?","\"Breakpoints - останавливает запрос и (или) ответ. В момент остановки их можно редактировать.\n" +
                "Map local - подставляет в body ответа json с твоего компьютера.\n" +
                "Map remote - позволяет перенаправлять запрос с клиента в другой бекенд ( например с тестового окружения в прод)\"");
        map.put("Что делать, если бекенд уже передали в тест, а фронт ещё не готов?","Тестировать бекенд в постман с использованием АПИ, А тестирование базы данных с помощью SQL");
        map.put("Что делать если фронт уже готов, а бекенд нет?","\"Обговорить с командой, ждать ли бэкенд, или мокать данные (сделать заглушку).\n" +
                "\n" +
                "Mock (Заглушка) - предоставление данных как минимум - в плане структуры, эквивалентных тому, что возвратил бы обычный бэкенд. Можно использовать чарльз\"");
        map.put("Опиши путь задачи до того, как она попадает в тестирование","backlog - in progress - in review - ready for test - testing - tested - closed");
        map.put("Опиши свои действия после релиза","\"1. Сообщу явно, что релиз состоялся и состав релиза\n" +
                "2. Смоук тестирование\n" +
                "3. Мониторинги (минут 30)\n" +
                " - смотрю на графики (Слежу, чтобы не было скачков)\n" +
                " - слежу за алертами и sentry \n" +
                " - смотрю отзывы от пользователей в apple store или play market\n" +
                " - слежу за обращениями от support_team\n" +
                "\n" +
                "После этого тест-кейсы этого релиза нужно добавить в общий регресс. И поставить задачу автотестировщику на автоматизацию критичных тест-кейсов.\"");
        map.put("Что такое хотфикс?","Мелкий релиз с решением бага");
        map.put("Что такое ретест?","Обнаружение ошибок в уже протестированных участках кода");

        //вопросы по клиент-серверной архитектуре
        map.put("что такое клиент-серверная архитектура?","\"Взаимодействие между клиентом и сервером, путем отправления запроса и получения ответа. Взаимодействует с помощью сетевых протоколов.\n" +
                "Двухуровневая схема - клиент-сервер.\n" +
                "Трехуровневая схема - клиент-сервер-база данных.\n" +
                "Самым распространенным клиентом является браузер. \n" +
                "Различают два вида клиента: Толстый и тонкий.\"");
        map.put("Что такое тонкий клиент?","Это компьютер или программа клиент который переносит все или большую часть задач по обработке информации на сервер. ПРимером тонкого клиента может быть браузер. Он тонкий потому, что вя основная бизнес-логика, все вычислительные мощности расположены на компьютере сервера, а клиент простое программное обеспечение, которое помогает отправлять запросы на сервер.");
        map.put("Что такое толстый клиент?","Это такое приложение, которое обеспечивает расширенную функциональность, независимо от центрального сервера. Часто сервер в данном случае является лишь хранилищем данных, а вся работа по обработке данных переносится на машину клиента. Пример: Онлайн игры");
        map.put("Что такое клиент, а что такое бекенд?","\"Клиент - визуализация. \n" +
                "Бэкенд - логика.\"");
        map.put("JavaScript, Python, Java, GO, С++ какой из этих языков программирования с большей вероятностью для клиента, а какой для бекенда?","\"JavaScript - в основном фронтенд, но также можно написать бэкенд.\n" +
                "GO - бэкенд\n" +
                "Python, C++, Java - бэкенд\"");
        map.put("Что такое http?","HTTP — протокол передачи данных, цель которого - передать информацию от клиента на сервер");
        map.put("В чем разница между http и https?","\"Http - открытый протокол. используется 80 порт, который визуально не отоброжается. \n" +
                "Https - закрытый протокол. используется 443 порт, который отоброжается в виде серого замочка. Вся передаваемая информация шифруется сайтом\"");
        map.put("Что такое ручка, метод и эндпоинт?","Запрос, хендлер, метод, эндпоинт, ручка означает одно и то же - запрос http");
        map.put("Что такое квери?","Часть урла, который передает информацию");
        map.put("Что такое cookie?","\"Это небольшие текстовые файлы, в который браузер записывает данные с посещенных вами сайтов\n" +
                "\n" +
                "Проще говоря, файлы куки позволяют сайтам \"\"запоминать\"\" своих посетителей\n" +
                "\n" +
                "Куки бывают: Сессионные (помогают с авторизацией), Трекинговые (отслеживают поведение), Персональные (помогают понять, посмотрел ли баннер посетитель)\"");
        map.put("что такое клиент-серверное приложение?","Это веб-приложение в котором клиент взаимодействует с веб-сервером при помощи браузера. В веб-приложения могут быть встроены веб-страницы либо сами веб-страницы могут являться веб-приложениями. Они используют имя пользователя и пароль для аутенфикации. Например: ВК, Фейсбук, ютуб");
        map.put("Что такое монолитная архитектура?","\"Это традиционная модель ПО, которая представляетс обой единый модуль, работающий автономно и независимо от других приложений.\n" +
                "Преимущества.\n" +
                "1. Приложение легче разрабатывать, когда она создана с использованием одной базы кода\n" +
                "2. Упрощенное тестирование.\n" +
                "3. Производительность \n" +
                "Недостатки:\n" +
                "1. Снижение скорости разработки\n" +
                "2. Надежность - ошибка в одном модуле, может повлиять на доступность всего приложения\n" +
                "3. Недостаточная гибкость. \"");
        map.put("Что такое микросервисная архитектура?","\"Это способ создании продуктов предполагающих разработку независимых друг от друга модулей. Каждая часть приложения отвечает за определенную задачу\n" +
                "Преимущества: \n" +
                "1. Гибкость\n" +
                "2. Легкость в обслуживании и тестировании\n" +
                "3. Высокая надежность - развертывая изменения для конкретной слжбы, можно не бояться что приложение выйдет из строя целиком.\n" +
                "Недостатки:\n" +
                "1. Дополнительные органзационные расходы.\n" +
                "2. Командам требуется дополнительный уровень комуникаций и сотрудничество, чтобы координировать работу над обновлениями и интерфейсами\n" +
                "3. Отсутствие ясности вопросах владения - по мере появления новых служб, увеличивается и количество работающих над ним команд. Со временем сложно определить к кому следует обращаться за поддержкой\"");
        map.put("Что такое cUrl?","\"Запросы из всех трех частей. Урл, хедер и боди. Берется в девтулс вкладка нетворк. \n" +
                "\n" +
                "-Выбрать интересующий нас запрос\n" +
                "-Нажать правую кнопку мыши\n" +
                "-Скопировать курл\n" +
                "-Скопированный текст отправляем разработчику\"");
        map.put("В чем разница между GET и POST запросом?","\"GET (Идемпотентный) - получение данных, нет боди. \n" +
                "-Фильтр в интернет магазинах\n" +
                "-Передача параметров через ссылку.\n" +
                "\n" +
                "POST (Неидемпотентный) - отправление данных\n" +
                "-есть боди.\n" +
                "-любые формы с паролями или банковскими картами\n" +
                "-отправка файлов\"");
        map.put("В чем разница между POST и PUT?","\"POST - это отправка новых данных\n" +
                "PUT - вносит изменения в уже имеющееся на сервере информацию\n" +
                "\n" +
                "POST подразумевает, что вы передаете данные в теле запроса, а PUT подразумевает, что вы все передаетее в урл. Тела запроса у PUT нет\"");
        map.put("Что такое REST?","REST - это архитектурный стиль. Он описывает структуру веб-сервиса. В его написании (в боди) используется JSON");
        map.put("Что такое XML?","\"Это расширенный язык разметки, который хранит в себе информацию и с помощью него эту информацию можно передавать при общении веб сервисов. Структурной единицой XML являются элементы\n" +
                "Используются теги\"");
        map.put("Что такое JSON?","Это текстовый формат обмена данными основанный на JavaScript. Документы формата JSON состоят из объектов.");
        map.put("Какие типы данных в JSON ты знаешь?","\"-Строка - \"\"Яблоко\"\"\n" +
                "-Число - 123\n" +
                "-Boolean - true/false\n" +
                "-null\n" +
                "-Массив - [\"\"Яблоко\"\", \"\"Апельсин\"\", \"\"Груша\"\"]\n" +
                "-Объект - {}\n" +
                "\"");
        map.put("Что такое хэдеры и что обычно в них указывают?","Хедеры (Заголовки) - в них указывают технические свойства запроса и клиента");
        map.put("Какие вкладки в devtools ты знаешь и зачем они нужны?","\"Headers - смотрим тип запроса, урл хедера запроса и ответа, статус код ответа\n" +
                "Network - Тут смотрим все запросы\n" +
                "Fetch/XHR - фильтр. Только запросы к бэкенду\n" +
                "Response - body ответа\n" +
                "Payload - body запроса (если есть)\n" +
                "Performance - вкладка отображает нагрузку, который создает сайт на компьютер пользователя\n" +
                "Aplication - панель, где можно очистить хранилище и кэш, а также управлять Базами данных\n" +
                "Elements - отображается весь HTML и CSS под открытой страницой. Можно посмотреть и внести исправления в файлы CSS и JS\"");
        map.put("В чем отличие REST от SOAP?","REST и SOAP на самом деле не сопоставимы. REST - это архитектурный стиль, SOAP - формат обмена сообщениями. в SOAP вы используете формат soap-xml для запросов и ответов. В REST такого фиксированного формата нет. Вы можете обмениватся сообщениями на основе xml, JSON или любого другого удобного формата");
        map.put("Что такое АПИ?","Это описание способов взаимодействия одной компьютерной программы с другими. Используется для написания всевозможных приложений");
        map.put("Расскажи про свой опыт написания автотестов?","\"Автотесты есть в подсказках в постмане вкладка Tests в Snippets. Писал(а) в Postman\n");
        map.put("Какие поверки они выполняли? На каком языке написаны?","Делал(а) проверки есть ли строка, проверки статус-код, проверки на определенную строку, проверка за сколько времени обрабатывается запрос, проверка строки в хедере. Написано на языке JavaScript (JS)");
        map.put("В каких сервисах обычно можно посмотреть документацию по АПИ?","Swagger, openApi, Github");
        map.put("Расскажи, какими функциями в Postman ты пользовался (коллекции, переменные, cUrl)?","Создавал(а) коллекции, переменные, импортировал(а) курл, писал(а) автотесты, прогонял(а) все автотесты");

        //вопросы по мобилке
        map.put("Что такое adb?","\"консольная клиент-серверная программа, выполняет роль универсального интерфейса для управления Android-устройствами (или их эмуляторами).\n" +
                "Через ADB программы на компьютере можно взаимодействовать с телефоном или планшетом, например для синхронизации контактов, бэкапов данных или удаленного доступа к устройству.\"");
        map.put("В чем разница между симулятором и эмулятором?","\"Эмулятор — программа, которая аппаратно и программно имитирует работу реального мобильного устройства и настраивается в виртуальной среде.\n" +
                "    \n" +
                "Примеры эмуляторов для имитации Android-девайсов: Android Studio, Genymotion.\n" +
                "    \n" +
                "Эмуляторов iOS-устройств не бывает.\n" +
                "    \n" +
                "Симулятор — программа, созданная в виртуальной среде, которая также копирует конфигурацию и поведение реального целевого устройства.\n" +
                "    \n" +
                "Симуляторы не имитируют аппаратную часть устройств, поэтому работу железа протестировать не получится.\"");




        // Get a random entry from the HashMap.
        Object[] crunchifyKeys = map.keySet().toArray();
        Object key = crunchifyKeys[new Random().nextInt(crunchifyKeys.length)];

        String question = key.toString();
        answer = map.get(key);

        sendMessage(chatId, question);
    }

    private void randomAnswer(long chatId, String answer) {
        sendMessage(chatId, answer);
    }

    private void sendMessage(long chatId, String textToSend) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(textToSend);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("Ошибка отправки сообщения: {}", e.getMessage());
        }
    }
}
